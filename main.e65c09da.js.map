{"version":3,"sources":["scripts/main.js"],"names":["ulList","document","querySelector","arrListItem","querySelectorAll","getEmployees","employees","resultArr","person","personObj","prop","name","innerText","dataset","push","sortList","list","fromStrToValidNum","num","slice","split","join","employeesArr","sort","a","salary","b","innerHTML","map","position","age"],"mappings":";AAAA,aA8CA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA5CA,IAAMA,EAASC,SAASC,cAAc,MAChCC,EAAkBF,EAAAA,SAASG,iBAAiB,OAElD,SAASC,EAAaC,GACdC,IADyB,EACzBA,EAAY,GAEGD,EAAAA,EAAAA,GAHU,IAGC,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAArBE,IAAAA,EAAqB,EAAA,MACxBC,EAAY,GAIb,IAAA,IAAMC,KAFXD,EAAUE,KAAOH,EAAOI,UAELJ,EAAOK,QACxBJ,EAAUC,GAAQF,EAAOK,QAAQH,GAGnCH,EAAUO,KAAKL,IAZc,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAexBF,OAAAA,EAKT,SAASQ,EAAST,EAAWU,GACrBC,IAAAA,EAAoB,SAACC,GAClB,OAACA,EAAIC,MAAM,GAAGC,MAAM,KAAKC,KAAK,KAGjCC,EAAejB,EAAaC,GAC/BiB,KAAK,SAAA,EAAA,GAAWC,IAAAA,EAARC,EAAAA,OAAuBC,EAARD,EAAAA,OACtBR,OAAAA,EAAkBS,GAAKT,EAAkBO,KAE7CR,EAAKW,UACDL,SAAAA,OAAAA,EAAaM,IAAI,SAAApB,GACAA,MAAAA,6BAAAA,OAAAA,EAAOqB,SACTrB,0BAAAA,OAAAA,EAAOiB,OACVjB,uBAAAA,OAAAA,EAAOsB,IAEjBtB,oBAAAA,OAAAA,EAAOG,KALc,uBAOtBU,KAAK,IARV,QAXFhB,EAAaF,GAuBbY,EAASZ,EAAaH","file":"main.e65c09da.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst ulList = document.querySelector('ul');\nconst arrListItem = [...document.querySelectorAll('li')];\n\nfunction getEmployees(employees) {\n  const resultArr = [];\n\n  for (const person of employees) {\n    const personObj = {};\n\n    personObj.name = person.innerText;\n\n    for (const prop in person.dataset) {\n      personObj[prop] = person.dataset[prop];\n    }\n\n    resultArr.push(personObj);\n  }\n\n  return resultArr;\n}\n\ngetEmployees(arrListItem);\n\nfunction sortList(employees, list) {\n  const fromStrToValidNum = (num) => {\n    return +num.slice(1).split(',').join('');\n  };\n\n  const employeesArr = getEmployees(employees)\n    .sort(({ salary: a }, { salary: b }) =>\n      fromStrToValidNum(b) - fromStrToValidNum(a));\n\n  list.innerHTML = `\n    ${employeesArr.map(person => `<li\n      data-position=\"${person.position}\"\n      data-salary\"=${person.salary}\"\n      data-age=\"${person.age}\"\n    >\n      ${person.name}\n    </li>\n    `).join('')}\n  `;\n}\n\nsortList(arrListItem, ulList);\n"]}